{"mappings":"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","sources":["../node_modules/@project-serum/sol-wallet-adapter/src/index.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\ntype InjectedProvider = { postMessage: (params: unknown) => void };\n\nexport default class Wallet extends EventEmitter {\n  private _providerUrl: URL | undefined;\n  private _injectedProvider?: InjectedProvider;\n  private _publicKey: PublicKey | null = null;\n  private _popup: Window | null = null;\n  private _handlerAdded = false;\n  private _nextRequestId = 1;\n  private _autoApprove = false;\n  private _responsePromises: Map<\n    number,\n    [(value: string) => void, (reason: Error) => void]\n  > = new Map();\n\n  constructor(provider: unknown, private _network: string) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network: this._network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n  }\n\n  handleMessage = (\n    e: MessageEvent<{\n      id: number;\n      method: string;\n      params: {\n        autoApprove: boolean;\n        publicKey: string;\n      };\n      result?: string;\n      error?: string;\n    }>,\n  ): void => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl?.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this.handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this.handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        const promises = this._responsePromises.get(e.data.id);\n        if (promises) {\n          const [resolve, reject] = promises;\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  private handleConnect() {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this.handleMessage);\n      window.addEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._injectedProvider) {\n      return new Promise<void>((resolve) => {\n        void this.sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl?.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  }\n\n  private handleDisconnect() {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this.handleMessage);\n      window.removeEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([, reject], id) => {\n      this._responsePromises.delete(id);\n      reject(new Error('Wallet disconnected'));\n    });\n  }\n\n  private async sendRequest(method: string, params: Record<string, unknown>) {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup?.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl?.origin ?? '',\n        );\n\n        if (!this.autoApprove) {\n          this._popup?.focus();\n        }\n      }\n    });\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey;\n  }\n\n  get connected(): boolean {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove(): boolean {\n    return this._autoApprove;\n  }\n\n  async connect(): Promise<void> {\n    if (this._popup) {\n      this._popup.close();\n    }\n    await this.handleConnect();\n  }\n\n  async disconnect(): Promise<void> {\n    if (this._injectedProvider) {\n      await this.sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this.handleDisconnect();\n  }\n\n  private _beforeUnload = (): void => {\n    void this.disconnect();\n  };\n\n  async sign(\n    data: Uint8Array,\n    display: unknown,\n  ): Promise<{\n    signature: Buffer;\n    publicKey: PublicKey;\n  }> {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = (await this.sendRequest('sign', {\n      data,\n      display,\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response = (await this.sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    const response = (await this.sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    })) as { publicKey: string; signatures: string[] };\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async diffieHellman(\n    publicKey: Uint8Array,\n  ): Promise<{ publicKey: Uint8Array; secretKey: Uint8Array }> {\n    if (!(publicKey instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n    const response = (await this.sendRequest('diffieHellman', {\n      publicKey,\n    })) as {\n      publicKey: Uint8Array;\n      secretKey: Uint8Array;\n    };\n    return response;\n  }\n}\n\nfunction isString(a: unknown): a is string {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a: unknown): a is InjectedProvider {\n  return (\n    isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function'\n  );\n}\n\nfunction isObject(a: unknown): a is Record<string, unknown> {\n  return typeof a === 'object' && a !== null;\n}\n"],"names":["_eventemitter3","require","_web3Js","_bs58","Wallet","_eventemitter3Default","default","constructor","provider","_network","super","this","_publicKey","_popup","_handlerAdded","_nextRequestId","_autoApprove","_responsePromises","Map","handleMessage","e","_injectedProvider","source","window","origin","_a","_providerUrl","data","method","newPublicKey","PublicKey","params","publicKey","equals","handleDisconnect","autoApprove","emit","result","error","promises","get","id","resolve","reject","Error","_beforeUnload","disconnect","a","isObject","postMessage","isString","URL","hash","URLSearchParams","location","network","toString","handleConnect","addEventListener","Promise","sendRequest","name","open","once","removeEventListener","forEach","delete","connected","requestId","set","jsonrpc","Object","assign","_c","_b","_d","focus","connect","close","sign","display","Uint8Array","response","signature","_bs58Default","decode","signTransaction","transaction","message","encode","serializeMessage","addSignature","signAllTransactions","transactions","messages","map","tx","signatures","s","idx","diffieHellman"],"version":3,"file":"esm.0c14d4a0.js.map"}